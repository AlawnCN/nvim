-- since this is just an example spec, don't actually load anything here and return an empty spec
-- stylua: ignore
-- if true then return {} end

-- every spec file under config.plugins will be loaded automatically by lazy.nvim
--
-- In your plugin files, you can:
-- * add extra plugins
-- * disable/enabled LazyVim plugins
-- * override the configuration of LazyVim plugins
return {
    {
        "akinsho/bufferline.nvim",
        config = function()
            require("bufferline").setup {
                options = {
                    numbers = "ordinal", -- "none" | "ordinal" | "buffer_id" | "both" | function({ ordinal, id, lower, raise }): string,
                    mode = "tabs", -- 只显示标签页
                    separator_style = "slant",      -- 选择标签页之间的分隔符样式 "slant" | "slope" | "thick" | "thin" | { 'any', 'any' },
                    always_show_bufferline = false, -- 如果没有打开的标签页则隐藏标签栏
                    show_buffer_close_icons = false,-- 隐藏缓冲区关闭图标
                    show_close_icon = false,        -- 隐藏关闭图标
                    show_tab_indicators = false,    -- 显示标签页指示器
                    enforce_regular_tabs = true,    -- 强制所有标签页具有相同宽度
                    show_buffer_icons = true ,      -- disable filetype icons for buffers
                    show_duplicate_prefix = false , -- whether to show duplicate buffer prefix
                    themable = true,
                    --duplicates_across_groups = true, -- whether to consider duplicate paths in different groups as duplicates
                }
            }
        end,
    },
    {"sindrets/diffview.nvim"}, -- git diff view
    {"sainnhe/edge"},  -- Clean & Elegant Color Scheme inspired by Atom One and Material
    {'echasnovski/mini.align', version = '*'},
    -- {
    --     "nvim-tree/nvim-tree.lua",
    --     requires = {
    --         "nvim-tree/nvim-web-devicons", -- optional, for file icons
    --     },
    --     config = function()
    --         require("nvim-tree").setup {
    --             view = {
    --                 width = 30,
    --                 side = "left",
    --                 adaptive_size = true,
    --             },
    --             renderer = {
    --                 group_empty = true,
    --             },
    --             filters = {
    --                 dotfiles = false,
    --             },
    --             actions = {
    --                 open_file = {
    --                     quit_on_open = true, -- 打开文件后关闭nvim-tree
    --                 },
    --             },
    --             open_on_tab = true, -- 在新标签页中打开nvim-tree
    --         }
    --     end
    -- },
    {
        "toppair/peek.nvim",
        -- enabled = false,
        event = { "BufRead", "BufNewFile" },
        build = "deno task --quiet build:fast",
        config = function()
            require("peek").setup()
            vim.api.nvim_create_user_command("PeekOpen", require("peek").open, {})
            vim.api.nvim_create_user_command("PeekClose", require("peek").close, {})
        end,
    },

    { "nyoom-engineering/oxocarbon.nvim"},

    -- add gruvbox  Notice:moved to colorscheme.lua
    -- { "ellisonleao/gruvbox.nvim" },

    -- Configure LazyVim to load gruvbox
    -- {
    --     "LazyVim/LazyVim",
    --     opts = {
    --         -- colorscheme = "gruvbox",
    --         -- colorscheme = "oxocarbon",
    --         colorscheme = "catppuccin",
    --     },
    -- },

    -- change trouble config
    {
        "folke/trouble.nvim",
        enabled = false, -- disable trouble
        -- opts will be merged with the parent spec
        opts = { use_diagnostic_signs = true },
    },

    -- noice config 
    {
        "folke/noice.nvim",
        enabled = true,
        event = "VeryLazy",
        optional = true,
        dependencies = {
            -- if you lazy-load any plugin below, make sure to add proper `module="..."` entries
            "MunifTanjim/nui.nvim",
            -- OPTIONAL:
            --   `nvim-notify` is only needed, if you want to use the notification view.
            --   If not available, we use `mini` as the fallback
            "rcarriga/nvim-notify",
        },
        -- opts will be merged with the parent spec
        opts = {
            lsp = {
                override = {
                    ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
                    ["vim.lsp.util.stylize_markdown"] = true,
                    ["cmp.entry.get_documentation"] = true,
                },
            },
            routes = {
                {
                    filter = {
                        event = "msg_show",
                        -- find = "%d+L, %d+B",
                        any = {
                            { find = "%d+L, %d+B" },
                            { find = "; after #%d+" },
                            { find = "; before #%d+" },
                        },
                    },
                    view = "mini",
                },
                presets = {
                    bottom_search = true,
                -- bottom_search = false,
                command_palette = true,
                long_message_to_split = true,
                inc_rename = true,
            },
            cmdline = {
                enabled = true, -- enables the Noice cmdline UI
                view = "cmdline_popup", -- view for rendering the cmdline. Change to `cmdline` to get a classic cmdline at the bottom
                opts = {}, -- global options for the cmdline. See section on views
                ---@type table<string, CmdlineFormat>
                format = {
                    -- conceal: (default=true) This will hide the text in the cmdline that matches the pattern.
                    -- view: (default is cmdline view)
                    -- opts: any options passed to the view
                    -- icon_hl_group: optional hl_group for the icon
                    -- title: set to anything or empty string to hide
                    cmdline = { pattern = "^:", icon = "", lang = "vim" },
                    search_down = { kind = "search", pattern = "^/", icon = " ", lang = "regex" },
                    search_up = { kind = "search", pattern = "^%?", icon = " ", lang = "regex" },
                    filter = { pattern = "^:%s*!", icon = "$", lang = "bash" },
                    lua = { pattern = { "^:%s*lua%s+", "^:%s*lua%s*=%s*", "^:%s*=%s*" }, icon = "", lang = "lua" },
                    help = { pattern = "^:%s*he?l?p?%s+", icon = "" },
                    input = {}, -- Used by input()
                    -- lua = false, -- to disable a format, set to `false`
                },
            },
            messages = {
                -- NOTE: If you enable messages, then the cmdline is enabled automatically.
                -- This is a current Neovim limitation.
                enabled = false, -- enables the Noice messages UI
                view = "notify", -- default view for messages
                view_error = "notify", -- view for errors
                view_warn = "notify", -- view for warnings
                view_history = "messages", -- view for :messages
                -- view_search = "virtualtext", -- view for search count messages. Set to `false` to disable
                view_search = "false", -- view for search count messages. Set to `false` to disable
            },
        },
    },


    -- add symbols-outline
    {
        "simrat39/symbols-outline.nvim",
        cmd = "SymbolsOutline",
        keys = { { "<leader>cs", "<cmd>SymbolsOutline<cr>", desc = "Symbols Outline" } },
        config = true,
    },

    -- override nvim-cmp and add cmp-emoji
    {
        "hrsh7th/nvim-cmp",
        dependencies = { "hrsh7th/cmp-emoji" },
        ---@param opts cmp.ConfigSchema
        opts = function(_, opts)
            local cmp = require("cmp")
            opts.sources = cmp.config.sources(vim.list_extend(opts.sources, { { name = "emoji" } }))
        end,
    },

    -- change some telescope options and a keymap to browse plugin files
    {
        "nvim-telescope/telescope.nvim",
        keys = {
            -- add a keymap to browse plugin files
            -- stylua: ignore
            {
                "<leader>fp",
                function() require("telescope.builtin").find_files({ cwd = require("lazy.core.config").options.root }) end,
                desc = "Find Plugin File",
            },
        },
        -- change some options
        opts = {
            defaults = {
                layout_strategy = "horizontal",
                layout_config = { prompt_position = "top" },
                sorting_strategy = "ascending",
                winblend = 0,
            },
        },
    },

    -- add telescope-fzf-native
    {
        "telescope.nvim",
        dependencies = {
            "nvim-telescope/telescope-fzf-native.nvim",
            build = "make",
            config = function()
                require("telescope").load_extension("fzf")
            end,
        },
    },

    -- add pyright to lspconfig
    {
        "neovim/nvim-lspconfig",
        ---@class PluginLspOpts
        opts = {
            ---@type lspconfig.options
            servers = {
                -- pyright will be automatically installed with mason and loaded with lspconfig
                pyright = {},
            },
        },
    },

    -- add tsserver and setup with typescript.nvim instead of lspconfig
    {
        "neovim/nvim-lspconfig",
        dependencies = {
            "jose-elias-alvarez/typescript.nvim",
            init = function()
                -- require("lazyvim.util").on_attach(function(_, buffer)
                require("lazyvim.util").lsp.on_attach(function(_, buffer)
                    -- stylua: ignore
                    vim.keymap.set( "n", "<leader>co", "TypescriptOrganizeImports", { buffer = buffer, desc = "Organize Imports" })
                    vim.keymap.set("n", "<leader>cR", "TypescriptRenameFile", { desc = "Rename File", buffer = buffer })
                end)
            end,
        },
        ---@class PluginLspOpts
        opts = {
            ---@type lspconfig.options
            servers = {
                -- tsserver will be automatically installed with mason and loaded with lspconfig
                tsserver = {},
            },
            -- you can do any additional lsp server setup here
            -- return true if you don't want this server to be setup with lspconfig
            ---@type table<string, fun(server:string, opts:_.lspconfig.options):boolean?>
            setup = {
                -- example to setup with typescript.nvim
                tsserver = function(_, opts)
                    require("typescript").setup({ server = opts })
                    return true
                end,
                -- Specify * to use this function as a fallback for any server
                -- ["*"] = function(server, opts) end,
            },
        },
    },

    -- for typescript, LazyVim also includes extra specs to properly setup lspconfig,
    -- treesitter, mason and typescript.nvim. So instead of the above, you can use:
    { import = "lazyvim.plugins.extras.lang.typescript" },

    -- add more treesitter parsers
    {
        "nvim-treesitter/nvim-treesitter",
        opts = {
            ensure_installed = {
                "bash",
                "html",
                "java",
                "bash",
                "javascript",
                "json",
                "xml",
                "sql",
                "lua",
                "markdown",
                "markdown_inline",
                "python",
                "query",
                "regex",
                "tsx",
                "typescript",
                "vim",
                "yaml",
            },
        },
    },

    -- since `vim.tbl_deep_extend`, can only merge tables and not lists, the code above
    -- would overwrite `ensure_installed` with the new value.
    -- If you'd rather extend the default config, use the code below instead:
    {
        "nvim-treesitter/nvim-treesitter",
        opts = function(_, opts)
            -- add tsx and treesitter
            vim.list_extend(opts.ensure_installed, {
                "tsx",
                "typescript",
            })
        end,
    },

    -- the opts function can also be used to change the default opts:
    -- {
    --     "nvim-lualine/lualine.nvim",
    --     event = "VeryLazy",
    --     opts = function(_, opts)
    --         table.insert(opts.sections.lualine_x, "😄")
    --     end,
    -- },

    -- or you can return new options to override all the defaults
    -- {
    --     "nvim-lualine/lualine.nvim",
    --     event = "VeryLazy",
    --     init = function()
    --         vim.g.lualine_laststatus = vim.o.laststatus
    --         if vim.fn.argc(-1) > 0 then
    --             -- set an empty statusline till lualine loads
    --             vim.o.statusline = " "
    --         else
    --             -- hide the statusline on the starter page
    --             vim.o.laststatus = 0
    --         end
    --     end,
    --     opts = function()
    --         return {
    --             --[[add your custom lualine config here]]
    --         }
    --     end,
    -- },

    {
        "nvim-lualine/lualine.nvim",
        event = "VeryLazy",
        init = function()
            vim.g.lualine_laststatus = vim.o.laststatus
            if vim.fn.argc(-1) > 0 then
                -- set an empty statusline till lualine loads
                vim.o.statusline = " "
            else
                -- hide the statusline on the starter page
                vim.o.laststatus = 0
            end
        end,
        opts = function()
            -- PERF: we don't need this lualine require madness 🤷
            local lualine_require = require("lualine_require")
            lualine_require.require = require

            local icons = LazyVim.config.icons

            vim.o.laststatus = vim.g.lualine_laststatus

            local opts = {
                options = {
                    theme = "auto",
                    globalstatus = vim.o.laststatus == 3,
                    disabled_filetypes = { statusline = { "dashboard", "alpha", "ministarter" } },
                },
                sections = {
                    lualine_a = { "mode" },
                    lualine_b = { "branch" },

                    lualine_c = {
                        LazyVim.lualine.root_dir(),
                        {
                            "diagnostics",
                            symbols = {
                                error = icons.diagnostics.Error,
                                warn = icons.diagnostics.Warn,
                                info = icons.diagnostics.Info,
                                hint = icons.diagnostics.Hint,
                            },
                        },
                        { "filetype", icon_only = true, separator = "", padding = { left = 1, right = 0 } },
                        { LazyVim.lualine.pretty_path() },
                    },
                    lualine_x = {
                        -- stylua: ignore
                        {
                            function() return require("noice").api.status.command.get() end,
                            cond = function() return package.loaded["noice"] and require("noice").api.status.command.has() end,
                            color = function() return LazyVim.ui.fg("Statement") end,
                        },
                        -- stylua: ignore
                        {
                            function() return require("noice").api.status.mode.get() end,
                            cond = function() return package.loaded["noice"] and require("noice").api.status.mode.has() end,
                            color = function() return LazyVim.ui.fg("Constant") end,
                        },
                        -- stylua: ignore
                        {
                            function() return "  " .. require("dap").status() end,
                            cond = function() return package.loaded["dap"] and require("dap").status() ~= "" end,
                            color = function() return LazyVim.ui.fg("Debug") end,
                        },
                        -- stylua: ignore
                        {
                            require("lazy.status").updates,
                            cond = require("lazy.status").has_updates,
                            color = function() return LazyVim.ui.fg("Special") end,
                        },
                        {
                            "diff",
                            symbols = {
                                added = icons.git.added,
                                modified = icons.git.modified,
                                removed = icons.git.removed,
                            },
                            source = function()
                                local gitsigns = vim.b.gitsigns_status_dict
                                if gitsigns then
                                    return {
                                        added = gitsigns.added,
                                        modified = gitsigns.changed,
                                        removed = gitsigns.removed,
                                    }
                                end
                            end,
                        },
                    },
                    lualine_y = {
                        { "progress", separator = " ", padding = { left = 1, right = 0 } },
                        { "location", padding = { left = 0, right = 1 } },
                    },
                    lualine_z = {
                        function()
                            return " " .. os.date("%R")
                        end,
                    },
                },
                extensions = { "neo-tree", "lazy" },
            }

            -- do not add trouble symbols if aerial is enabled
            -- And allow it to be overriden for some buffer types (see autocmds)
            if vim.g.trouble_lualine and LazyVim.has("trouble.nvim") then
                local trouble = require("trouble")
                local symbols = trouble.statusline({
                    mode = "symbols",
                    groups = {},
                    title = false,
                    filter = { range = true },
                    format = "{kind_icon}{symbol.name:Normal}",
                    hl_group = "lualine_c_normal",
                })
                table.insert(opts.sections.lualine_c, {
                    symbols and symbols.get,
                    cond = function()
                        return vim.b.trouble_lualine ~= false and symbols.has()
                    end,
                })
            end

            return opts
        end,
    },

    -- use mini.starter instead of alpha
    -- { import = "lazyvim.plugins.extras.ui.mini-starter" },

    {
        "nvimdev/dashboard-nvim",
        enabled = false,
        event = "VimEnter",
        dependencies = { {'nvim-tree/nvim-web-devicons'}},
        opts = function()
            local logo = 
            [[    __       ___             __       __   __  ___  _____  ___
     /""\     |"  |           /""\     |"  |/  \|  "|(\"   \|"  \
    /    \    ||  |          /    \    |'  /    \:  ||.\\   \    |
   /' /\  \   |:  |         /' /\  \   |: /'        ||: \.   \\  |
  //  __'  \   \  |___     //  __'  \   \//  /\'    ||.  \    \. |
 /   /  \\  \ ( \_|:  \   /   /  \\  \  /   /  \\   ||    \    \ |
(___/    \___) \_______) (___/    \___)|___/    \___| \___|\____\)
]]
            logo = string.rep("\n", 8) .. logo .. "\n\n"

            local opts = {
                theme = "doom",
                -- theme = "doom",
                disable_move = true,
                shortcut_type = "number",
                hide = {
                    -- this is taken care of by lualine
                    -- enabling this messes up the actual laststatus setting after loading a file
                    statusline = false,
                    tabline = true,       -- hide the tabline
                    winbar = true,        -- hide winbar
                },
                config = {
                    header = vim.split(logo, "\n"),
                    -- header = vim.split(logo, "\n"),
                    -- stylua: ignore
                    center = {
                        -- { action = "Telescope find_files",                                     desc = " Find file",       icon = "󱈅 ", key = "f" },
                        { action = "ene | startinsert",                                        desc = " New file",        icon = " ", key = "n" },
                        { action = "Telescope oldfiles",                                       desc = " Recent files",    icon = " ", key = "r" },
                        { action = "Telescope live_grep",                                      desc = " Find text",       icon = " ", key = "g" },
                        { action = [[lua require("lazyvim.util").telescope.config_files()()]], desc = " Config",          icon = " ", key = "c" },
                        { action = 'lua require("persistence").load()',                        desc = " Restore Session", icon = " ", key = "s" },
                        { action = "LazyExtras",                                               desc = " Lazy Extras",     icon = " ", key = "x" },
                        { action = "Lazy",                                                     desc = " Lazy",            icon = "󰒲 ", key = "l" },
                        { action = "qa",                                                       desc = " Quit",            icon = " ", key = "q" },
                    },
                    footer = function()
                        local stats = require("lazy").stats()
                        local ms = (math.floor(stats.startuptime * 100 + 0.5) / 100)
                        return { "⚡ Neovim loaded " .. stats.loaded .. "/" .. stats.count .. " plugins in " .. ms .. "ms" }
                    end,
                },
            }

            for _, button in ipairs(opts.config.center) do
                button.desc = button.desc .. string.rep(" ", 43 - #button.desc)
            end

            -- close Lazy and re-open when the dashboard is ready
            if vim.o.filetype == "lazy" then
                vim.cmd.close()
                vim.api.nvim_create_autocmd("User", {
                    pattern = "DashboardLoaded",
                    callback = function()
                        require("lazy").show()
                    end,
                })
            end

            return opts
        end,
    },
    -- alpha config
    -- {  
    --     "goolord/alpha-nvim",
    --     opts = function()
    --         local dashboard = require("alpha.themes.dashboard")
    --         local logo = [[
    -- ______  __                                __     __ ______ __       __
    -- /      \|  \                              |  \   |  \      \  \     /  \
    -- |  ▓▓▓▓▓▓\ ▓▓ ______  __   __   __ _______ | ▓▓   | ▓▓\▓▓▓▓▓▓ ▓▓\   /  ▓▓
    -- | ▓▓__| ▓▓ ▓▓|      \|  \ |  \ |  \       \| ▓▓   | ▓▓ | ▓▓ | ▓▓▓\ /  ▓▓▓           Z
    -- | ▓▓    ▓▓ ▓▓ \▓▓▓▓▓▓\ ▓▓ | ▓▓ | ▓▓ ▓▓▓▓▓▓▓\\▓▓\ /  ▓▓ | ▓▓ | ▓▓▓▓\  ▓▓▓▓       Z
    -- | ▓▓▓▓▓▓▓▓ ▓▓/      ▓▓ ▓▓ | ▓▓ | ▓▓ ▓▓  | ▓▓ \▓▓\  ▓▓  | ▓▓ | ▓▓\▓▓ ▓▓ ▓▓    z
    -- | ▓▓  | ▓▓ ▓▓  ▓▓▓▓▓▓▓ ▓▓_/ ▓▓_/ ▓▓ ▓▓  | ▓▓  \▓▓ ▓▓  _| ▓▓_| ▓▓ \▓▓▓| ▓▓  z
    -- | ▓▓  | ▓▓ ▓▓\▓▓    ▓▓\▓▓   ▓▓   ▓▓ ▓▓  | ▓▓   \▓▓▓  |   ▓▓ \ ▓▓  \▓ | ▓▓
    -- \▓▓   \▓▓\▓▓ \▓▓▓▓▓▓▓ \▓▓▓▓▓\▓▓▓▓ \▓▓   \▓▓    \▓    \▓▓▓▓▓▓\▓▓      \▓▓
    --         ]]

    --         dashboard.section.header.val = vim.split(logo, "\n")
    --         dashboard.section.buttons.val = {
    --             -- dashboard.button("f", " " .. " Find file", ":Telescope find_files <CR>"),
    --             dashboard.button("f", "󱈅 " .. " Find file", ":Telescope find_files <CR>"),
    --             dashboard.button("n", " " .. " New file", ":ene <BAR> startinsert <CR>"),
    --             dashboard.button("r", " " .. " Recent files", ":Telescope oldfiles <CR>"),
    --             dashboard.button("g", " " .. " Find text", ":Telescope live_grep <CR>"),
    --             dashboard.button("c", " " .. " Config", ":e $MYVIMRC <CR>"),
    --             dashboard.button("s", " " .. " Restore Session", [[:lua require("persistence").load() <cr>]]),
    --             dashboard.button("l", "󰒲 " .. " Lazy", ":Lazy<CR>"),
    --             dashboard.button("q", " " .. " Quit", ":qa<CR>"),
    --         }
    --         for _, button in ipairs(dashboard.section.buttons.val) do
    --             button.opts.hl = "AlphaButtons"
    --             button.opts.hl_shortcut = "AlphaShortcut"
    --         end
    --         dashboard.section.header.opts.hl = "AlphaHeader"
    --         dashboard.section.buttons.opts.hl = "AlphaButtons"
    --         dashboard.section.footer.opts.hl = "AlphaFooter"
    --         dashboard.opts.layout[1].val = 8
    --         return dashboard
    --     end


    -- },

    -- add jsonls and schemastore ans setup treesitter for json, json5 and jsonc
    { import = "lazyvim.plugins.extras.lang.json" },

    -- add any tools you want to have installed below
    {
        "williamboman/mason.nvim",
        opts = {
            ensure_installed = {
                "stylua",
                "shellcheck",
                "shfmt",
                "flake8",
            },
        },
    },

    -- Use <tab> for completion and snippets (supertab)
    -- first: disable default <tab> and <s-tab> behavior in LuaSnip
    {
        "L3MON4D3/LuaSnip",
        keys = function()
            return {}
        end,
    },
    -- then: setup supertab in cmp
    {
        "hrsh7th/nvim-cmp",
        dependencies = {
            "hrsh7th/cmp-emoji",
        },
        ---@param opts cmp.ConfigSchema
        opts = function(_, opts)
            local has_words_before = function()
                unpack = unpack or table.unpack
                local line, col = unpack(vim.api.nvim_win_get_cursor(0))
                return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
            end

            local luasnip = require("luasnip")
            local cmp = require("cmp")

            opts.mapping = vim.tbl_extend("force", opts.mapping, {
                -- ["<Tab>"] = cmp.mapping(function(fallback)
                ["<C-n>"] = cmp.mapping(function(fallback)
                    if cmp.visible() then
                        cmp.select_next_item()
                        -- You could replace the expand_or_jumpable() calls with expand_or_locally_jumpable()
                        -- they way you will only jump inside the snippet region
                    elseif luasnip.expand_or_jumpable() then
                        luasnip.expand_or_jump()
                    elseif has_words_before() then
                        cmp.complete()
                    else
                        fallback()
                    end
                end, { "i", "s" }),
                -- ["<S-Tab>"] = cmp.mapping(function(fallback)
                ["<C-p>"] = cmp.mapping(function(fallback)
                    if cmp.visible() then
                        cmp.select_prev_item()
                    elseif luasnip.jumpable(-1) then
                        luasnip.jump(-1)
                    else
                        fallback()
                    end
                end, { "i", "s" }),
                ['<D-j>'] = cmp.mapping.complete(),
            })
        end,
    },
}
